<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.yedam.app.emp.mapper.EmpMapper">
 	<!-- 전체조회 (ORDER BY 필수)-->
 	<!--  *는 안씀 정확하게 명시 -->
 	<select id="selectEmpAllList" resultType="EmpVO">
 		<!-- 테이블 만들때 컬럼명 c_id -> 작성X, 2문자 이상 | c_id -> cId -> getCId : cid -->
 		SELECT employee_id,
 			   first_name,
 			   last_name,
 			   email,
 			   phone_number,
 			   hire_date,
 			   job_id,
 			   salary,
 			   commission_pct,
 			   manager_id,
 			   department_id
 		FROM   employees
 		ORDER BY employee_id DESC
 	</select>
 	
 	<!-- 단건조회 -->
 	<select id="selectEmpInfo" resultType="EmpVO">
 		SELECT employee_id,
 			   first_name,
 			   last_name,
 			   email,
 			   phone_number,
 			   hire_date,
 			   job_id,
 			   salary,
 			   commission_pct,
 			   manager_id,
 			   department_id
 		FROM   employees
 		WHERE  employee_id = #{ employeeId }	   
 		<!-- #{ } : PreparedStatement	0 -> 0, Kang -> 'Kang'을 반환 : 데이터를 넘길때 #사용 (기본으로 #사용)
 			 ${ } : Statement			0 -> 0, Kang ->  Kang 을 반환 : 쿼리문을 작성할때 사용(테이블이 변경되거나 컬럼이 바뀔때 등 변동이 있을때), 변수값으로 대체하는것 가능 -->
 	</select>
 	
 	<!-- 등록 -->
 	<!-- resultType은 생략가능, 정수가 반환되기 때문 
 		Date는 null만 체크 -->
 	<insert id="insertEmpInfo" parameterType="EmpVO">
 		<!-- select와 insert에서만 selectKey 사용, 값을 가져올때 사용 -> 파라미터값에 집어넣고 실행
 			 order은 insert가 실행 전, 실행 후에 동작할건지 선택
 			 ','는 앞에 붙임. 조건문이 있을때 같이 움직일 수 있도록-->
 		<selectKey keyProperty="employeeId" resultType="int" order="BEFORE">
 			SELECT NVL(MAX(employee_id),0) + 1
 			FROM employees
 		</selectKey>
 		INSERT INTO employees
 				( 
 					employee_id
 				  , first_name
 				  , last_name
 				  , email
 				  , hire_date
 				  , job_id
 				  , salary
 				  )
 				 VALUES
 				 (
 				    #{employeeId}
 				    , #{firstName}
 				    , #{lastName}
 				    , #{email}
 				    <choose>
 				     	<when test="hireDate != null">
 				     		, #{hireDate}
 				     	</when>
 				     	<otherwise>
 				     		, sysdate
 				     	</otherwise>
 				    </choose>
 				    , #{jobId}
 				    , #{salary}
 				  )
 	</insert>
 				  <!-- 
 				  	<if test="hireDate != null">
 				    , #{hireDate}
 				    </if>
 				    <if test="hireDate == null">
 				    , sysdate
 				    </if>
 				   -->
 				   
 				   
	<!-- 수정 : 사원의 급여를 정해진 비율로 인상 
		Param으로 작성한 이름 사용-->
		<!-- 인터페이스에서 //@Param("empId") , int employeeId 로 작성했을 경우
			-> #{empId}로 사용 -->
	<update id="updateEmpSal">
		UPDATE employees
		SET salary = salary * (1 + #{raise} / 100)
		WHERE employee_id = #{emp.employeeId}
	</update>
	
	<!-- 수정 : 사원 정보 수정 -->
	<!-- 1) 모든 항목에 업데이트 진행, 전제조건 : 모든 항목에 정보가 존재 -->
	<!-- 2) Mybatis -> Dynamic SQL 사용 -->
	<!-- int는 null이 존재하지X -> salary > 0 으로 비교 -->
	<!-- set과 if를 같이 쓰면 ','를 처리해줌 -->
	<update id="updateEmpInfo" parameterType="EmpVO">
		UPDATE employees
		<set>
			<if test="firstName != null and !firstName.equals('')">
				first_name = #{firstName},
			</if>
			<if test="email != null and !email.equals('')">
				email = #{email},
			</if>
			<if test="salary > 0">
				salary = #{salary},
			</if>
		</set>
		WHERE employee_id = #{employeeId}
	</update>
	
	<!-- 삭제 - 객체가 아닌, 값이 하나일 경우 이름 상관X -->
	<delete id="deleteEmpInfo" parameterType="int">
		DELETE FROM employees
		WHERE employee_id = #{empId}
	</delete>
	
	
 </mapper>